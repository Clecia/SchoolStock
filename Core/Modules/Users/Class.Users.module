<?php
/**
 * Created by MarxMedia Solutions.
 *         Author: Kevin
 *    Date: 15/03/2016 - 20:53
 *
 */

namespace Modules\Application;

use Abstracts\Component;
use Exceptions\EngineException;
use Interfaces\{
    ActiveSidebar, ModuleInteractions
};
use Modules\Application\Users\GraphicInterface\Create;
use Modules\Application\Users\GraphicInterface\Home;
use Modules\Application\Users\GraphicInterface\Modify;
use Modules\Application\Users\Manager\Active;
use Modules\Application\Users\Manager\Add;
use Modules\Application\Users\Manager\Chg;
use Modules\Application\Users\Manager\Del;
use Modules\Application\Users\Manager\GetData;
use Modules\CNN;
use Modules\Kernel\ModuleMenu;
use Modules\Template\Template;
use Modules\Upshot;


class Users extends Component implements ActiveSidebar,ModuleInteractions
{

    public function __construct()
    {
        parent::__construct();
        $this->loader();//Autoload padrão carregado pelo Component
        //$this->loader('atl'); Use com o parametro para autoload personalizado
    }

    /**
     * @param mixed ...$gets
     * @throws \Exceptions\PermissionException
     */
    public function init(...$gets) {
        try{
            /**
             * @decription Instancia de Permissoes
             * @doc - Usado para checar o nível de acsso do usuário em questão
             */
            //$instancePermission = new Permissions();
            /**
             * @description - Switch de acesso de área do módulo
             * @param $gets [] - GETS do navegador que define o padrão de acesso
             */
            switch (strtolower($gets[0][1])){
                /**
                 * @case PAGINA PRINCIPAL DO MODULO
                 */
                case 'new':
                    $this->setTitle(_tr('new_user'));
                    $this->applyRestriction('add');
                    $new  = new Create(Users::getName());
                    $new->init();
                    break;
                case 'edit':
                    $this->setTitle(_tr('edit_user'));
                    $this->applyRestriction('edit');
                    $edit = new Modify(Users::getName());
                    $edit->setAuthidToEdit(_level2);
                    $edit->init();
                    break;
                default:
                    $this->setTitle(_tr('users'));
                    $this->applyRestriction('view');
                    $home = new Home(Users::getName());
                    break;
            }
            //$this->setModuleMenu($this->getMenuInteractive());
        }
        catch (EngineException $exception){
            Upshot::noData(_tr('internal_error'),$exception->getMessage(),'wrong',null);
        }

    }

    /**
     * @param mixed ...$dataRequest
     * @throws \Exceptions\PermissionException
     */
    public function requests(...$dataRequest) {
        //var_dump($dataRequest);
        /**
         * @switch Este suite recupera o nome da ação do módulo que esta fazendo a
         * requisição.
         * @internal-doc O nome da ação esta no primeiro $_GET depois do
         * nome do módulo.
         */
        switch ($dataRequest[0]){
            /**
             * --------------------------------------------------
             * ***                  BIBLIOTECA                ***
             * --------------------------------------------------
             */
            /**
             * @description Request Handler para AddItem do Modulo
             */
            case 'get':
                $this->applyRestriction('view',true);
                $get = new GetData(Users::getName());
                $get->getDataToRemoveUser(_level3,_level4);
                break;
            case 'new':
                $this->applyRestriction('add',true);
                $add = new Add();
                $add->setAccessToken(_level3);
                $add->init();
                break;
            case 'edit':
                $this->applyRestriction('edit',true);
                $edit = new Chg(Users::getName());
                $edit->setAuthToEdit(_level3);
                $edit->setAccessToken(_level4);
                $edit->init();
                break;
            case 'remove':
                $this->applyRestriction('del',true);
                $del = new Del();
                $del->setModuleName(Users::getName());
                $del->setIdToRemove(_level3);
                $del->setAccessToken(_level4);
                $del->remove();
                break;
            case 'activeUser':
                $this->applyRestriction('edit',true);
                $active = new Active();
                $active->setAuthId(_level3);
                $active->setAccessToken(_level4);
                $active->init();
                break;
            default:
                echo _tr('bad_request');
            /**
             * --------------------------------------------------
             * ***               FIM BIBLIOTECA               ***
             * --------------------------------------------------
             */
        }
    }
    /** @method Função de autoload Personalizado */
    final protected function _atl($class){


        $includeClass = explode("\\", $class);//
        $PageName = end($includeClass);
        /*  Requisitando todas as classes utilizadas pelo APP;
            Endereçamento de Raiz de Site definido anteriorimente

            *Não Esquecer: O nome do arquivo deve ser o mesmo nome da Classe
            só assim será feito a inclusão
         */
        //var_dump($PageName);
        /** Extensão do módulo a ser adicionado */
        $moduleExtension = '.module';
        $incExtension = '.inc';
        $classPlace = explode('\\',__CLASS__);
        $mainClassPlace = end($classPlace);
        /** Local base de Dominio de Sistema */
        $domainPlace = APP_ROOT . DS . "Core". DS ."Modules" . DS . $PageName . $moduleExtension;
        $InterfacesPlace = APP_ROOT . DS . "Core". DS ."Modules" . DS . $mainClassPlace . DS. "Interfaces".DS. $PageName. $moduleExtension;
        $AbstractsPlace = APP_ROOT . DS . "Core". DS ."Modules" . DS . $mainClassPlace . DS. "Abstracts".DS. $PageName. $moduleExtension;
        $ControllerPlace = APP_ROOT . DS . "Core". DS ."Modules" . DS . $mainClassPlace . DS. "Handler".DS. $PageName. $moduleExtension;
        $ExceptionPlace = APP_ROOT . DS . "Core". DS ."Modules" . DS . $mainClassPlace . DS. "Exceptions".DS. $PageName. $moduleExtension;
        $GuiPlace = APP_ROOT . DS . "Core". DS ."Modules" . DS . $mainClassPlace . DS. "Gui" . DS . $PageName . $moduleExtension;
        echo $GuiPlace."<br>";
        if(file_exists($domainPlace)){
            if(!in_array($domainPlace,get_included_files()))
                include ($domainPlace);
        }
        else if(file_exists($InterfacesPlace)){
            if(!in_array($InterfacesPlace,get_included_files()))
                include ($InterfacesPlace);
        }
        else if(file_exists($AbstractsPlace)){
            if(!in_array($AbstractsPlace,get_included_files()))
                include ($AbstractsPlace);
        }
        else if(file_exists($ControllerPlace)){
            if(!in_array($ControllerPlace,get_included_files()))
                include ($ControllerPlace);
        }
        else if(file_exists($ExceptionPlace)){
            if(!in_array($ExceptionPlace,get_included_files()))
                include ($ExceptionPlace);
        }
        else if(file_exists($GuiPlace)){
            if(!in_array($GuiPlace,get_included_files()))
                include ($GuiPlace);
        }
    }
    static function getIcon() {
        return "usersIcon";
    }
    static function getDescription() {
        return _tr('system_locale/title_users_page');
    }
    public function getMenuInteractive() {
        $menu = new ModuleMenu(PgAC);
        $menu->createButton('dashboard','dashboard','link/example/pg1','pg1');
        $menu->createButton('add_item','newBook','link/example/pg2','pg2');
        $menu->createButton('bookcase','viewBook','link/example/pg3','pg3');
        $menu->createButton('circulations','circule_book','link/example/pg4','pg4');
        return $menu->show(true);
    }

    /***
     * @inheritdoc
     * @since 3.0.0
     * @param $widgetName - qual o nome do widget que deseja usar
     * @docs = O widget monta a estrutura de apresentação com template
     * do kernel para uso
     * @return mixed Vetor ou String HTML5
     */
    static function widgets($widgetName) {
        $sql = CNN::getSql();
        if (empty($widgetName)){
            return false;
        }
        else{
            switch ($widgetName){
                case 'totalUsers':
                    //------------------------------
                    //Widget Total de Grupos de Usuários
                    $parserUserGroup =[];
                    $queryUserGroup = $sql->query("SELECT count(authid) as `totalUserGroups` FROM ".__USERS);
                    $getResultUserGroup = $queryUserGroup->fetch(\PDO::FETCH_ASSOC);
                    $parserUserGroup['title'] = _tr('users');
                    $parserUserGroup['icon'] = "ais-user";
                    $parserUserGroup['sub_title'] = _tr('total_of_users_registered');
                    $parserUserGroup['content'] = "<h1 class='txt-center'>".$getResultUserGroup['totalUserGroups']."</h1>";
                    $templateWUS = new Template(APP_ROOT.DS.MODULES_PATH.DS.self::getName().DS."Gui/Views/Controller/widget.tpl",$parserUserGroup,true);
                    //------------------------------
                    return $templateWUS->showTemplate();
                    break;
            }
        }


    }
}//fim da classe Library