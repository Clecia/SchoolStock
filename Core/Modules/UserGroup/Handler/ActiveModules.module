<?php
/**
 * Created by MarxMedia.
 * Author: Kevin Marques
 * Date: 24/08/2018 - 10:37
 * Grh : ActiveModules.module
 */

namespace Modules\Application\UserGroup\Manager;


use Main\Assembly;
use Modules\CNN;
use Modules\System;

class ActiveModules
{
    private $sql;
    private $manifest;
    private $modulePlace;
    private $permissionsTable;
    private $usersTable;
    private $crdid;
    private $modulesToShow = [];

    public function getModulesToShow() { return $this->modulesToShow; }
    public function setModulePlace($modulePlace) { $this->modulePlace = $modulePlace; }
    private function getSql() { return $this->sql; }
    private function getManifest() { return $this->manifest; }

    public function __construct() {
        define("VERSION","1505");
        $this->sql = CNN::getSql();
        !defined("APP_ROOT") ? define("APP_ROOT",dirname(__FILE__)) : null;
        !defined("DS") ? define("DS",DIRECTORY_SEPARATOR) : null;
        !defined("__CREDENTIALS") ? define("__CREDENTIALS",'credentials') : null;
        !defined("__USERS") ? define("__USERS",'users') : null;
        !defined("_AUTHID_") ? define("_AUTHID_",$_SESSION['authid']) : null;
        //Local padrão da pasta de Módulos
        $this->modulePlace = "Core/Modules";
        //Nome da tabela padrão
        $this->permissionsTable = __CREDENTIALS;
        $this->usersTable = __USERS;
        $this->crdid = _AUTHID_;
        $this->manifests();
        $this->readManifest();

    }

    /***
     * @function manifest() - Recupera os modules que possuam
     * o MANIFEST.XML para observar as informações atribuidos
     * e se habilita mostrar a tabela de permissoes na gerencia
     * de grupo de usuários.
     */
    private function manifests(){
        //Recupera a lista da pasta de modulos
        $file = glob($this->modulePlace."/*");
        //inicialização do vetor com a listagem dos manifest
        $listOfManifests =[] ;
        //Itera sobre a lista de pastas encontradas
        foreach ($file as $item) {
            //verifica se é realmente uma pasta (cada modulo existe dentro de uma pasta)
            if (is_dir($item)){
                //variavel com a definição de busca pelo arquivo xml
                $innerModules = $item."/manifest.xml";
                //primeira verificação em cada iteração
                $checkList = glob($innerModules);
                //se o vetor recuperado não estiver vazio
                if(!empty($checkList)){
                    //Adiciona a lista de manifests o link especificado
                    array_push($listOfManifests,glob($innerModules)[0]) ;
                }
            }
        }
        //ao final da iteração salva a lista na variavel do objeto
        $this->manifest =$listOfManifests;
    }
    private function readManifest(){
        foreach ($this->manifest as $item) {
            $XMlRead = new \SimpleXMLElement($item,LIBXML_NOEMPTYTAG ,true);
            $convert = json_decode(json_encode($XMlRead),true);
            $getMinimalRequired = preg_replace('/[^0-9]/','',$convert['permission']['minimal_required']);
            $checkHashSum = md5('AlbaFox_'.$convert['module']);
            if((int)$getMinimalRequired <= (int) VERSION){
                if($convert['permission']['show_manager'] == 'true'){
                    if($convert['hashsum'] == $checkHashSum){
                        $this->modulesToShow[] =$convert ;
                    }
                    else{Assembly::createLog('O HASHSUM de integridade do MANIFEST do módulo '.$convert['module'].' está incorreto ou corrompido. O Módulo ainda poderá estar em funcionamento, contudo, somente para o super-usuário.',3);}
                }
                else{Assembly::createLog('A Flag de apresentação no MANIFEST do módulo '.$convert['module']." está desabilitado. Desta forma, o módulo não aparecerá na seleção de permissões!",0);}
            }
            else{

                Assembly::createLog('Versão requerida do módulo '.$convert['module'].' não atende ao requisitado. O Módulo ainda poderá estar em funcionamento, contudo, somente para o super-usuário.',2);
            }


        }

    }
    public function getModules(){}
}